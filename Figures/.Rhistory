library(pca3d)
# library(rgl)
# pc <- prcomp(t(sd))
# lab <- factor(c(rep("Mack",5), rep("Maret1",3), rep("Maret2",3), rep("gerstner",7), rep("Mack",5),
#                 rep("Maret1",3), rep("Maret2",3), rep("gerstner",7)))
#
# pca3d(pc, comp = 1:3, show.labels = rep("",36), show.plane = T, group = lab, radius = 0.5, legend = "topleft",
#       show.shadows = T, show.centroids = T, show.group.labels = F, show.shapes = T, show.ellipses = T)
# rgl.snapshot("preRUV_3dPCA.png", fmt = "png", top = TRUE )
#
# pc2 <- prcomp(t(s$normalizedCounts))
# trt <- factor(c(rep("CC",18),rep("SD",18)))
#
# pca3d(pc2, comp = 1:3, show.labels = rep("",36), show.plane = F, group = trt, radius = 0.5, legend = "topleft",
#       show.shadows = T, show.centroids = T, show.group.labels = F, show.ellipses = T, show.shapes = T, new = T)
# snapshotPCA3d("postRUV_3dPCA.png")
##################################################################################################
setwd("./Figures")
des <- model.matrix(~0 + x + s$W)
colnames(des) <- c(names, paste0("W", 1:n))
f <- lmFit(sd, des)
contrast.matrix <- makeContrasts(SD6 - CC6, levels = des)
f <- contrasts.fit(f, contrast.matrix)
f <- eBayes(f)
postRUV <- topTable(f, coef = 1,  adjust.method = "fdr", p.value = 1, number = Inf)
all.p <- postRUV$P.Val
hist(all.p, breaks = 1000, xlab = "p-value", main = NULL, xlim = c(0,1), ylim = c(0,800), cex.lab = 2.5, cex.axis = 2)
pos.control.meta <- c('Arc', 'Dusp1', 'Egr1', 'Egr2', 'Homer1', 'Hspa5', 'Klf10', 'Nr4a1', 'Nr4a3', 'Ppm2c', 'Ptgs2', 'Rbm3',
'Sult1a1', 'Crh')
pos.control.maret <- c('Arc','Calr','Dio2','Fos','Hsp5a','Hspa1b','Npas2','Nr4a1','P4ha1','Per1','Per2','Rbm3','Sult1a1',
'Tfrc','Tipin','Dbp','Bdnf','Cirbp','Crh','Egr1','Egr3','Nptx2','Sgk','Slc2a1','Tmem10',
'Tsc22d3','Homer1')
pos.control <- union(pos.control.meta, pos.control.maret)
pos.control.genes <- unname(unlist(getBM(filters = "mgi_symbol", attributes = c(map),
values= pos.control, mart= mart)))
###PLOT
svg(filename = "RMA_SD6M_volcano_hippocampus.svg", width = 4, height = 4, pointsize = 7)
par(mar = c(5,5,3,1))
with(preRUV, plot(logFC, -log10(P.Value), pch=20, ylab="-log10(p-value)", xlab="logFC", cex.lab = 2.5, cex.axis = 1.5, ylim = c(0,18), cex = 2))
with(subset(preRUV, adj.P.Val < 0.01 ), points(logFC, -log10(P.Value), pch=20, col="dodgerblue", cex = 2))
with(subset(preRUV, rownames(preRUV) %in% pos.control.genes), points(logFC, -log10(P.Value), pch=1, lwd=4, col="red", cex = 1.5))
title(main = "13% Positive Controls", cex.main = 2)
dev.off()
svg(filename = "RUV_SD6M_volcano_hippocampus.svg", width = 4, height = 4, pointsize = 7)
par(mar = c(5,5,3,1))
with(postRUV, plot(logFC, -log10(P.Value), pch=20, ylab="-log10(p-value)", xlab="logFC", cex.lab = 2.5, cex.axis = 1.5, ylim = c(0,18), cex = 2))
with(subset(postRUV, adj.P.Val < 0.01 ), points(logFC, -log10(P.Value), pch=20, col="dodgerblue", cex = 2))
with(subset(postRUV, rownames(postRUV) %in% pos.control.genes), points(logFC, -log10(P.Value), pch=1, lwd=4, col="red", cex = 1.5))
title(main = "100% Positive Controls", cex.main = 2)
dev.off()
###Broken axis p-value plot
##################################################################################################################
library(plotrix)
svg(filename = "RMA_SD6M_pvalue_hippocampus.svg", width = 4, height = 4, pointsize = 7)
par(mar = c(6,6,1,1))
h <- hist(preRUV$P.Value, breaks = 100)
h$counts[h$counts > 400] <- h$counts[h$counts > 400] - 900
plot(h, ylim = c(0,500), yaxt = "n", xlab = "p-value", main = NULL, xlim = c(0,1), cex.lab = 2.5, cex.axis = 1.5, col = "grey")
axis(side = 2, at = c(0,100,200,300,400,500), labels = c(0,100,200,300,1300,1400), cex.axis = 1.5)
axis.break(axis = 2, breakpos = 375, style = "slash", brw = 0.03)
dev.off()
svg(filename = "RUV_SD6M_pvalue_hippocampus.svg", width = 4, height = 4, pointsize = 7)
par(mar = c(6,6,1,1))
h <- hist(postRUV$P.Value, breaks = 100)
h$counts[h$counts > 400] <- h$counts[h$counts > 400] - 900
plot(h, ylim = c(0,500), yaxt = "n", xlab = "p-value", main = NULL, xlim = c(0,1), cex.lab = 2.5, cex.axis = 1.5, col = "grey")
axis(side = 2, at = c(0,100,200,300,400,500), labels = c(0,100,200,300,1300,1400), cex.axis = 1.5)
axis.break(axis = 2, breakpos = 375, style = "slash", brw = 0.03)
dev.off()
###Supplementary Table
tab <- topTable(f, coef = 1,  adjust.method = "fdr", p.value = 0.01, number = Inf)
gene <- rownames(tab)
nt <- getBM(filters = map, attributes = c(map, "mgi_symbol"), values= gene, mart= mart)
tab <- merge(tab, nt, by.x = "row.names", by.y = map)
tab$mogene2_id <- mapping_mogene2$affy_mogene_2_1_st_v1[match(tab$Row.names, mapping_mogene2$ensembl_gene_id)]
tab$mo430_id <- mapping_mo430$affy_mouse430_2[match(tab$Row.names, mapping_mo430$ensembl_gene_id)]
tab <- tab[, c(1, 9, 10, 8, 2:7)]
colnames(tab)[1:4] <- c("Ensembl ID", "Mouse Gene 2.1 ST probeset ID", "Mouse Genome 430 2.0 probeset ID", "MGI Symbol")
library(xlsx)
write.xlsx(tab, file = "../tables/supplementary_table_1.xlsx", sheetName = "Maret_Mackiewicz_Gerstner_Peixoto", row.names = F)
plotPCA(s$normalizedCounts, col = c("red","black","black","black")[lab], lwd = 2, bg = colors[x], isLog = T, labels = F, pch = symbols[lab], cex = 3, cex.lab = 2.5, cex.axis = 1.5)
legend("topleft", c(levels(lab), "Sleep Deprivation", "Circadian Control"), pch = c(21,22,24,23,19,19),
col = c(rep("black", 4), "#66C2A5", "#FC8D62"), pt.cex = 1.5)
setwd("./Figures")
getwd()
dim(tab)
source('~/Documents/SD_MA_MetaAnalysis/scripts/SD6_MetaAnalysis_wPeixoto.R')
with(preRUV, plot(logFC, -log10(P.Value), pch=20, ylab="-log10(p-value)", xlab="logFC", cex.lab = 2.5, cex.axis = 1.5, ylim = c(0,18), cex = 2))
with(subset(preRUV, adj.P.Val < 0.01 ), points(logFC, -log10(P.Value), pch=20, col="dodgerblue", cex = 2))
with(subset(preRUV, rownames(preRUV) %in% pos.control.genes), points(logFC, -log10(P.Value), pch=1, lwd=4, col="red", cex = 1.5))
with(postRUV, plot(logFC, -log10(P.Value), pch=20, ylab="-log10(p-value)", xlab="logFC", cex.lab = 2.5, cex.axis = 1.5, ylim = c(0,18), cex = 2))
with(subset(postRUV, adj.P.Val < 0.01 ), points(logFC, -log10(P.Value), pch=20, col="dodgerblue", cex = 2))
with(subset(postRUV, rownames(postRUV) %in% pos.control.genes), points(logFC, -log10(P.Value), pch=1, lwd=4, col="red", cex = 1.5))
h <- hist(postRUV$P.Value, breaks = 100)
h$counts[h$counts > 400] <- h$counts[h$counts > 400] - 900
plot(h, ylim = c(0,500), yaxt = "n", xlab = "p-value", main = NULL, xlim = c(0,1), cex.lab = 2.5, cex.axis = 1.5, col = "grey")
axis(side = 2, at = c(0,100,200,300,400,500), labels = c(0,100,200,300,1300,1400), cex.axis = 1.5)
axis.break(axis = 2, breakpos = 375, style = "slash", brw = 0.03)
dim(tab)
plotPCA(s$normalizedCounts, col = c("red","black","black","black")[lab], lwd = 2, bg = colors[x], isLog = T, labels = F, pch = symbols[lab], cex = 3, cex.lab = 2.5, cex.axis = 1.5)
source('~/.active-rstudio-document')
setwd("/Users/peixotolab/Documents/ExonRNAseq")
library(limma)
library(edgeR)
y <- read.table("CC_FC_RT_HTSeqEnsemblmm9_Exoncounts.txt")
cpm <- cpm(y)
geneLevel <- sapply(strsplit(rownames(y), ":", fixed = T), function(x) x[1])
split <- lapply(split(cpm, geneLevel), matrix, ncol = 15)
head(split)
split[1]
?colMeans
colMeans(split[1])
typeof(split[1])
class(split[1])
as.matrix(split[1])
split1
split[[1]]
split[1]
?matrix
split <- lapply(split(cpm, geneLevel), as.matrix, ncol = 15)
split[1]
split <- lapply(split(cpm, geneLevel), matrix, ncol = 15)
split[1]
split$ENSMUSG0000000005
split$ENSMUSG00000000005
split$ENSMUSG00000000001
split$ENSMUSG00000000001[,1]
split$ENSMUSG00000000001[,2]
split$ENSMUSG00000000001[1,2]
type(split$ENSMUSG00000000001)
typeof(split$ENSMUSG00000000001)
colMeans(split$ENSMUSG00000000001)
colMeans(split[[1]])
colMeans(split[[2]])
colMeans(split[1])
split[1]
split[[1]]
lapply(1:length(geneLevel), function(x) colMeans(split[[x]]))
length(geneLevel)
split[[362996]]
split[[362995]]
split[[362000]]
length(split)
tail(split)
tail(geneLevel)
lapply(1:length(split), function(x) colMeans(split[[x]]))
exonMeans <- lapply(1:length(split), function(x) colMeans(split[[x]]))
head(exonMeans)
exonMeans <- lapply(lapply(1:length(split), function(x) colMeans(split[[x]])), matrix, ncol = 15)
exonMeans
head(exonMeans)
exonMeans <- lapply(1:length(split), function(x) colMeans(split[[x]]))
exonMeans
head(splot)
head(split)
head(exonMeans)
exonMeans <- lapply(1:length(split), function(x) colMeans(split[[x]]))
head(exonMeans)
names(exonMeans) <- names(split)
head(exonMeans)
lapply(split, function(x) colMeans(x))
exonMeans <- lapply(split, function(x) colMeans(x))
head(exonMeans)
apply(exonMeans, 1, print)
exonMeans <- lapply(lapply(split, function(x) colMeans(x)), matrix, ncol = 15, dimnames(names(split)))
exonMeans <- lapply(lapply(split, function(x) colMeans(x)), matrix, ncol = 15)
head(exonMeans)
exonMeans <- lapply(split, function(x) colMeans(x))
unlist(exonMeans)
lapply(exonMeans,function(x) do.call(cbind,x))
lapply(exonMeans, function(x) do.call(cbind,x))
head(exonMeans)
exonMeas[[1]]
exonMeans[1]
typeof(exonMeans[1])
class(exonMeans[1])
class(exonMeans[[1]])
typeof(exonMeans[[1]])
lapply(exonMeans, function(x) do.call(cbind,x))
lapply(exonMeans, function(x) do.call(cbind,x[1]))
lapply(exonMeans, function(x) print)
lapply(exonMeans, function(x) print(x))
do.call(rbind, exonMeans)
lapply(exonMeans, function(x) do.call(rbind,x))
do.call(rbind, exonMeans)
head(do.call(rbind, x))
head(do.call(rbind, exonMeans))
exonMeans <- do.call(rbind, lapply(split, function(x) colMeans(x)))
head(exonMeans)
apply(exonMeans, 1, function(x) x[x>1] >= 3)
filter <- apply(exonMeans, 1, function(x) x[x>1] >= 3)
head(filter)
filter <- apply(exonMeans, 1, function(x) x[x>1,] >= 3)
filter <- apply(exonMeans, 1, function(x) x >= 1)
head(filter)
filter <- apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3)
head(filter)
filter <- which(apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3))
filter
head(filter)
names(filter)
filter <- names(which(apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3)))
head(filter)
y[rownames(y) %in% filter,]
rownames(y)
head(geneLevel)
y[geneLevel %in% filter,]
filtered <- y[geneLevel %in% filter,]
head(filtered)
dim(filtered)
filter <- names(which(apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3)))
split <- lapply(split(y, geneLevel), matrix, ncol = 15)
exonMeans <- do.call(rbind, lapply(split, function(x) colMeans(x)))
filter <- names(which(apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3)))
filtered <- y[geneLevel %in% filter,]
split <- lapply(split(y, geneLevel), matrix, ncol = 15)
exonMeans <- do.call(rbind, lapply(split, function(x) colMeans(x)))
head(split)
head(y)
typeof(y)
class(y)
typeof(y[1,])
typeof(y[1,1])
colMeans(y)
head(split)
cpm
typeof(cpm)
head(cpm)
class(cpm)
y <- as.numeric(read.table("CC_FC_RT_HTSeqEnsemblmm9_Exoncounts.txt"))
head(y)
y <- read.table("CC_FC_RT_HTSeqEnsemblmm9_Exoncounts.txt")
class(y)
as.matrix(t)
as.matrix(y)
y <- as.matrix(read.table("CC_FC_RT_HTSeqEnsemblmm9_Exoncounts.txt"))
head(y)
geneLevel <- sapply(strsplit(rownames(y), ":", fixed = T), function(x) x[1])
split <- lapply(split(y, geneLevel), matrix, ncol = 15)
exonMeans <- do.call(rbind, lapply(split, function(x) colMeans(x)))
filter <- names(which(apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3)))
filtered <- y[geneLevel %in% filter,]
dim(filtered)
v <- voom(filtered, design, plot=TRUE) ## fit linear model
design <- model.matrix(~0 + factor(c(rep(1,5), rep(2,5), rep(3,5)))
colnames(design) <- c("CC", "FC", "RT")
## apply voom
v <- voom(filtered, design, plot=TRUE) ## fit linear model
design()
design''
design
design <- model.matrix(~0 + factor(c(rep(1,5), rep(2,5), rep(3,5))))
colnames(design) <- c("CC", "FC", "RT")
## apply voom
v <- voom(filtered, design, plot=TRUE) ## fit linear model
y <- as.matrix(read.table("CC_FC_RT_HTSeqEnsemblmm9_Exoncounts.txt"))
cpm <- cpm(y)
geneLevel <- sapply(strsplit(rownames(y), ":", fixed = T), function(x) x[1])
split <- lapply(split(cpm, geneLevel), matrix, ncol = 15)
exonMeans <- do.call(rbind, lapply(split, function(x) colMeans(x)))
filter <- names(which(apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3)))
filtered <- y[geneLevel %in% filter,]
design <- model.matrix(~0 + factor(c(rep(1,5), rep(2,5), rep(3,5))))
colnames(design) <- c("CC", "FC", "RT")
## apply voom
v <- voom(filtered, design, plot=TRUE) ## fit linear model
length(filter)
View(exonMeans)
x <- exonMeans[1,]
x[x >= 1]
x[x >= 3]
x[x >= 1]
dim(filtered)
?cpm
cpm <- cpm(y, normalized.lib.sizes = T, log = F)
geneLevel <- sapply(strsplit(rownames(y), ":", fixed = T), function(x) x[1])
split <- lapply(split(cpm, geneLevel), matrix, ncol = 15)
exonMeans <- do.call(rbind, lapply(split, function(x) colMeans(x)))
filter <- names(which(apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3)))
filtered <- y[geneLevel %in% filter,]
dim(filtered)
design <- model.matrix(~0 + factor(c(rep(1,5), rep(2,5), rep(3,5))))
colnames(design) <- c("CC", "FC", "RT")
## apply voom
v <- voom(filtered, design, plot=TRUE) ## fit linear model
fit <- lmFit(v, design)
fit.de <- eBayes(fit, robust=TRUE)
install.packages("statmod")
library(limma)
library(edgeR)
fit <- lmFit(v, design)
fit.de <- eBayes(fit, robust=TRUE)
top <- topTable(fit.de, number=Inf)
de <- rownames(top[top$adj.P.Val<=0.1,])
length(de)
## [1] 23
summary(decideTests(fit.de))
de
head(de)
set <- betweenLaneNormalization(y, which="upper")
plotRLE(set, outline=FALSE, ylim=c(-4, 4), col=colors[x])
library(RColorBrewer)
colors <- brewer.pal(3, "Set2")
colnames(Y)
colnames(y)
x <- as.factor(rep(c("CC", "FC", "RT"), each=5))
x
plotRLE(set, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotRLE(y, outline=FALSE, ylim=c(-4, 4), col=colors[x])
dim(y)
length(geneLevel)
unique(geneLeve)
unique(geneLevel)
length(unique(geneLevel))
dim(y)
plotRLE(y, outline=FALSE, ylim=c(-3, 3), col=colors[x])
plotRLE(y, outline=FALSE, col=colors[x])
plotRLE(y, outline=FALSE)
plotPCA(y, col=colors[x], cex=1.2)
y <- betweenLaneNormalization(y, which="upper")
plotRLE(y, outline=FALSE, col=colors[x])
plotPCA(y, col=colors[x], cex=1.2)
cpm <- cpm(y, normalized.lib.sizes = T, log = F)
geneLevel <- sapply(strsplit(rownames(y), ":", fixed = T), function(x) x[1])
split <- lapply(split(cpm, geneLevel), matrix, ncol = 15)
exonMeans <- do.call(rbind, lapply(split, function(x) colMeans(x)))
filter <- names(which(apply(exonMeans, 1, function(x) length(x[x >= 1]) >= 3)))
filtered <- y[geneLevel %in% filter,]
dim(filtered)
dim(y)
y <- as.matrix(read.table("CC_FC_RT_HTSeqEnsemblmm9_Exoncounts.txt"))
x <- as.factor(rep(c("CC", "FC", "RT"), each = 5))
source('~/Documents/SD_MA_MetaAnalysis/Final/Recovery_Sleep.R')
setwd("/Users/peixotolab/Documents/SD_MA_MetaAnalysis/Final")
library(RColorBrewer)
library(RUVSeq)
library(mogene21sttranscriptcluster.db)
library(stringr)
library(gplots)
library(plotrix)
library(xlsx)
library(dendextend)
library(ggplot2)
library(reshape2)
load("expression.rda")
notUnique <- function(x) x %in% x[duplicated(x)]
###ID MAP
#################################################################################################################
x <- mogene21sttranscriptclusterSYMBOL
mapped_probes <- mappedkeys(x)
map_symbol <- as.data.frame(x[mapped_probes])
colnames(map_symbol) <- c("affy_mogene_2_1_st_v1", "symbol")
x <- mogene21sttranscriptclusterENSEMBL
mapped_probes <- mappedkeys(x)
map_ensembl <- as.data.frame(x[mapped_probes])
colnames(map_ensembl) <- c("affy_mogene_2_1_st_v1", "ensembl")
###POSITIVE CONTROLS
##################################################################################################################
pos.control.meta <- c('Arc','Dusp1','Egr1','Egr2','Homer1','Klf10','Nr4a1','Nr4a3','Pdp1','Ptgs2','Rbm3','Sult1a1','Crh')
pos.control.maret <- c('Arc','Calr','Dio2','Fos','Hspa5','Hspa1b','Npas2','Nr4a1','P4ha1','Per1','Per2','Rbm3','Sult1a1',
'Tfrc','Tipin','Dbp','Bdnf','Cirbp','Crh','Egr1','Egr3','Nptx2','Sgk1','Slc2a1','Opalin',
'Tsc22d3','Homer1')
pos.sd <- union(pos.control.meta, pos.control.maret)
pos.sd.genes <- map_symbol[match(pos.sd, map_symbol[,2]),]
pos.rs <- c("Bdnf","Egr3","Fosl2","Hsp90b1","Hspa5","Junb","Nptx2")
pos.rs.genes <- map_symbol[match(pos.rs, map_symbol[,2]),]
###DATA PREP
##################################################################################################################
eData <- as.matrix(eData)
eData <- eData[,-grep("RS1_3", colnames(eData))]
eData <- eData[,-grep("CC7_3", colnames(eData))]
eData <- eData[,c(1:34, 49:65, 35:48)]
filter <- apply(eData, 1, function(x) length(x[x < 4]) <= dim(eData)[2]/2)
filtered <- eData[filter,]
x <- as.factor(str_split_fixed(colnames(filtered), "_", n = 2)[,1])
x <- factor(x,levels(x)[c(1,3,4,5,2,10,6,7,8,9)])
names <- levels(x)
dat <- as.matrix(filtered)
symbols <- c(21,22,24)
symbols2 <- c(19,17,15)
trt <- factor(c(rep("CC", 34), rep("SD", 7), rep("RS", 24)))
colfunc.sd <- colorRampPalette(c("red", "darkred"))
colfunc.rs <- colorRampPalette(c("dodgerblue", "darkblue"))
colfunc.cc <- colorRampPalette(c("green", "darkgreen"))
colors <- c(colfunc.cc(5), colfunc.sd(1), colfunc.rs(4))
background <- rownames(dat)
background <- map_ensembl$ensembl_id[match(background, map_ensembl$probe_id)]
write.table(background, file = "tables/background.txt", sep = "\t", quote = F, row.names = F, col.names = F)
###PRE RUV TEST
##################################################################################################################
par(mar = c(7,4,1,1))
plotRLE(dat, outline = FALSE, col = colors[x], las = 2, ylim = c(-0.5, 0.5))
svg(filename = "Figures/RMA_PCA.svg", width = 4, height = 4, pointsize = 7)
par(mar = c(6,6,1,1))
plotPCA(dat, bg = colors[x], isLog = T, labels = F, pch = symbols[trt], cex = 3, cex.lab = 2.5, cex.axis = 1.5)
legend("bottomright", levels(x), col = colors, pch = symbols2[c(rep(1,5), 2, rep(3,4))],  pt.cex = 1.5, bty = "n")
dev.off()
des1 <- model.matrix(~0 + x)
colnames(des1) <- names
f1 <- lmFit(dat, des1)
contrast.matrix <- makeContrasts(SD - CC6, RS1 - CC7, RS2 - CC8, RS3 - CC8, RS6 - CC11, levels = des1)
f1 <- contrasts.fit(f1, contrast.matrix)
f1 <- eBayes(f1)
###RUV
##################################################################################################################
makeRow <- function(y) { c(grep(y, x), rep(-1, 7 - length(grep(y, x)))) }
groups <- matrix(data = unlist(lapply(names, makeRow)), nrow = length(names), byrow = TRUE)
k = 6
controls = rownames(dat)
s <- RUVs(dat, cIdx = controls, k = k, scIdx = groups, round = FALSE, isLog = T)
###POST RUV TEST
##################################################################################################################
par(mar = c(7,4,1,1))
plotRLE(s$normalizedCounts, outline = FALSE, ylim = c(-0.5, 0.5), col = colors[x], las = 2)
svg(filename = "Figures/RUV_PCA.svg", width = 4, height = 4, pointsize = 7)
par(mar = c(6,6,1,1))
plotPCA(s$normalizedCounts, bg = colors[x], isLog = T, labels = F, pch = symbols[trt], cex = 3, cex.lab = 2.5, cex.axis = 1.5)
legend("topleft", levels(x), col = colors, pch = symbols2[c(rep(1,5), 2, rep(3,4))],  pt.cex = 1.5, bty = "n")
dev.off()
des2 <- model.matrix(~0 + x + s$W)
colnames(des2) <- c(names, paste0("W", 1:k))
f2 <- lmFit(dat, des2)
contrast.matrix <- makeContrasts(SD - CC6, RS1 - CC7, RS2 - CC8, RS3 - CC8, RS6 - CC11, levels = des2)
f2 <- contrasts.fit(f2, contrast.matrix)
f2 <- eBayes(f2)
###PLOT FUNCTIONS
##################################################################################################################
plot_volcano <- function(tests, pos, main = NULL, y) {
par(mar = c(5,5,3,1))
with(tests, plot(logFC, -log10(P.Value), pch=20, ylab="-log10(p-value)", xlab="logFC", ylim = c(0,y), cex.lab = 2.5, cex.axis = 1.5, cex = 2))
with(subset(tests, adj.P.Val<0.01 ), points(logFC, -log10(P.Value), pch=20, col="dodgerblue", cex = 2))
with(subset(tests, rownames(tests) %in% pos), points(logFC, -log10(P.Value), pch=1, lwd=4, cex = 1.5, col="red"))
title(main = main, cex.main = 2)
}
plot_pvalue <- function(tests, pos, main = NULL, brk, max) {
par(mar = c(6,6,1,1))
h <- hist(tests$P.Value, breaks = 100, ylab = "")
h$counts[h$counts > brk] <- h$counts[h$counts > brk] - ((h$counts[h$counts > brk] - brk) - ((h$counts[h$counts > brk] - brk) %% 100))
plot(h, ylim = c(0, brk + 100), yaxt = "n", xlab = "p-value", ylab = "", main = NULL, xlim = c(0,1), cex.lab = 2.5, cex.axis = 1.5, col = "grey")
axis(side = 2, at = c(seq(0, brk, by = 200), brk, brk + 100), labels = c(seq(0, brk - 100, by = 200), max - 100, max), las = 1, cex.axis = 1.5, ylab = "")
title(ylab = "Frequency", mgp=c(4,1,0), cex.lab = 2.5)
axis.break(axis = 2, breakpos = brk - 50, style = "slash", brw = 0.03)
}
###RMA PLOTS
##################################################################################################################
toptable <- function(x, f, p) { topTable(f, coef = x, adjust.method = "fdr", p.value = p, number = Inf, confint = F) }
tests <- c("SD" = 1, "RS1" = 2, "RS2" = 3, "RS3" = 4, "RS6" = 5)
RMA.test.all <- lapply(tests, toptable, f = f1, p = 1)
RUV.test.all <- lapply(tests, toptable, f = f2, p = 1)
list2env(RMA.test.all, .GlobalEnv)
svg(filename = "Figures/RMA_SD_pvalue.svg", width = 4, height = 4, pointsize = 7)
plot_pvalue(SD, pos.sd.genes[,1], brk = 2700, max = 3300)
dev.off()
svg(filename = "Figures/RMA_SD_volcano.svg", width = 4, height = 4, pointsize = 7)
plot_volcano(SD, pos.sd.genes[,1], main = "72% Positive Controls", y = 15)
dev.off()
svg(filename = "Figures/RMA_RS1_volcano.svg", width = 4, height = 4, pointsize = 7)
plot_volcano(RS1, pos.rs.genes[,1], main = "29% Positive Controls", y = 12)
dev.off()
svg(filename = "Figures/RMA_RS1_pvalue.svg", width = 4, height = 4, pointsize = 7)
plot_pvalue(RS1, pos.rs.genes[,1], brk = 700, max = 1300)
dev.off()
svg(filename = "Figures/RMA_RS2_volcano.svg", width = 4, height = 4, pointsize = 7)
plot_volcano(RS2, pos.rs.genes[,1], main = "29% Positive Controls", y = 12)
dev.off()
svg(filename = "Figures/RMA_RS2_pvalue.svg", width = 4, height = 4, pointsize = 7)
plot_pvalue(RS2, pos.rs.genes[,1], brk = 900, max = 1600)
dev.off()
svg(filename = "Figures/RMA_RS3_volcano.svg", width = 4, height = 4, pointsize = 7)
plot_volcano(RS3, pos.rs.genes[,1], main = "29% Positive Controls", y = 15)
dev.off()
svg(filename = "Figures/RMA_RS3_pvalue.svg", width = 4, height = 4, pointsize = 7)
plot_pvalue(RS3, pos.rs.genes[,1], brk = 900, max = 1500)
dev.off()
svg(filename = "Figures/RMA_RS6_volcano.svg", width = 4, height = 4, pointsize = 7)
plot_volcano(RS6, pos.rs.genes[,1], main = "0% Positive Controls", y = 10)
dev.off()
svg(filename = "Figures/RMA_RS6_pvalue.svg", width = 4, height = 4, pointsize = 7)
plot_pvalue(RS6, pos.rs.genes[,1], brk = 1300, max = 1900)
dev.off()
source('~/Documents/SD_MA_MetaAnalysis/Final/Recovery_Sleep.R')
svg(filename = "Figures/UpFast.svg", width = 8, height = 8, pointsize = 1)
timeSeriesUp(c4.data, c7.data)
dev.off()
source('~/Documents/SD_MA_MetaAnalysis/Final/Recovery_Sleep.R')
c4.data <- timeConstant(4, c("Arc|Per1|Per2"), 1)
c7.data <- timeConstant(7, c("Egr1|Egr2"), 1)
svg(filename = "Figures/Figure4_UpFast.svg", width = 8, height = 8, pointsize = 1)
timeSeriesUp(c4.data, c7.data)
dev.off()
c3.data <- timeConstant(3, c("Homer1|Bdnf|Fosb"), 1)
c1.data <- timeConstant(1, c("Hspa5|Npas2"), 1)
svg(filename = "Figures/Figure4_UpSlow.svg", width = 8, height = 8, pointsize = 1)
timeSeriesUp(c3.data, c1.data)
dev.off()
c2.data <- timeConstant(2, c("Eif3f|Hdac9|Usp2|Usp28|Sin3a|Nlgn1"), 1)
svg(filename = "Figures/Figure4_DownFast.svg", width = 8, height = 8, pointsize = 1)
timeSeriesDown(c2.data)
dev.off()
c5.data <- timeConstant(5, c("Cirbp|Dbp"), 4)
svg(filename = "Figures/Figure4_DownSlow.svg", width = 8, height = 8, pointsize = 1)
timeSeriesDown(c5.data)
dev.off()
getwd()
source('~/Documents/SD_MA_MetaAnalysis/Final/SD6_MetaAnalysis.R')
source('~/Documents/SD_MA_MetaAnalysis/Final/SD6_MetaAnalysis.R')
write.xlsx(tab, file = "Tables/Additional File 2.xlsx", sheetName = "Maret_Mackiewicz_Gerstner_Peixoto", row.names = F)
library(xlsx)
write.xlsx(tab, file = "Tables/Additional File 2.xlsx", sheetName = "Maret_Mackiewicz_Gerstner_Peixoto", row.names = F)
tab
write.xlsx(tab, file = "Tables/Additional File 2.xlsx", sheetName = "Maret_Mackiewicz_Gerstner_Peixoto", row.names = F)
write.xlsx(tab, file = "/Users/peixotolab/Documents/SD_MA_MetaAnalysis/Final/Tables/Additional File 2.xlsx", sheetName = "Maret_Mackiewicz_Gerstner_Peixoto", row.names = F)
